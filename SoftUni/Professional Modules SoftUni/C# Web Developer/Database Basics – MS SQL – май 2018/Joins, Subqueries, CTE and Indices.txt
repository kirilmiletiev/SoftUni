

--   Joins, Subqueries, CTE and Indices

USE SoftUni
GO
-- PROBLEM  01. Employee Address

SELECT TOP(5)EmployeeID, JobTitle, Employees.AddressID, Addresses.AddressText FROM Employees 
    JOIN Addresses ON Employees.AddressID = Addresses.AddressID
  ORDER BY AddressID ASC 
--=====================================================================================================


-- PROBLEM 02. Addresses with Towns
SELECT TOP (50) E.FirstName , E.LastName, T.[Name], A.AddressText  
FROM Employees AS E   
JOIN Addresses AS A ON A.AddressID = E.AddressID  
JOIN Towns AS T ON A.TownID = T.TownID
ORDER BY E.FirstName, LastName
--=====================================================================================================

-- PROBLEM  03. Sales Employees
SELECT E.EmployeeID , E.FirstName, E.LastName, D.[Name] FROM Employees AS E
JOIN  Departments AS D ON E.DepartmentID = D.DepartmentID
WHERE D.Name = 'Sales' ORDER BY E.EmployeeID 
--=====================================================================================================

-- PROBLEM    04. Employee Departments

SELECT TOP(5)	e.EmployeeID, e.FirstName,  E.Salary, d.[Name] FROM Employees AS e
JOIN   Departments AS d ON e.DepartmentID = d.DepartmentID 
WHERE E.Salary > 15000 ORDER BY D.DepartmentID
--=====================================================================================================

-- PROBLEM    05. Employees Without Projects

SELECT TOP (3) e.EmployeeID,
               e.FirstName
FROM Employees AS e
     LEFT OUTER JOIN EmployeesProjects AS ep ON e.EmployeeID = ep.EmployeeID
WHERE ep.EmployeeID IS NULL
ORDER BY e.EmployeeID; 
--=====================================================================================================

-- PROBLEM    06. Employees Hired After
SELECT E.FirstName, E.LastName, E.HireDate,  D.[Name] FROM Employees AS E
  JOIN Departments AS D ON E.DepartmentID = D.DepartmentID
  WHERE D.[Name] = 'Sales' OR D.[Name] = 'Finance' AND E.HireDate > 1999-01-01
  ORDER BY E.HireDate
--=====================================================================================================

-- PROBLEM    07. Employees With Project

	  SELECT TOP(5) E.EmployeeID, E.FirstName, P.[Name]  FROM Employees AS E
	JOIN EmployeesProjects AS ep ON e.EmployeeID = ep.EmployeeID
     JOIN Projects AS p ON ep.ProjectID = p.ProjectID
      WHERE P.StartDate > 2002-08-13 AND EndDate IS NULL 
	  ORDER BY E.EmployeeID
--=====================================================================================================

-- PROBLEM    08. Employee 24
SELECT e.EmployeeID, e.FirstName, 
       CASE 
	   WHEN P.StartDate >= '2005'
	   THEN NULL
	   ELSE
       p.[Name]
	   END AS ProjectName
	    FROM Employees AS e
      JOIN EmployeesProjects AS ep ON e.EmployeeID = ep.EmployeeID
      JOIN Projects AS p ON ep.ProjectID = p.ProjectID
	  WHERE e.EmployeeID = 24
--=====================================================================================================

-- PROBLEM    09. Employee Manager
SELECT E.EmployeeID, E.FirstName, E.ManagerID, D.FirstName FROM Employees AS E
      JOIN Employees AS D ON E.ManagerID = D.EmployeeID
	  WHERE E.ManagerID = 3 OR E.ManagerID = 7
	  ORDER BY E.EmployeeID
--=====================================================================================================

-- PROBLEM     10. Employees Summary
SELECT TOP(50) E.EmployeeID, E.FirstName + ' '+ E.LastName AS 'EmployeeName', 
D.FirstName + ' '+ D.LastName AS 'ManagerName', DE.Name
      FROM Employees AS E
      JOIN Employees AS D ON E.ManagerID = D.EmployeeID
	  JOIN Departments AS DE ON DE.DepartmentID = E.DepartmentID
	  ORDER BY E.EmployeeID
--=====================================================================================================

-- PROBLEM   11. Min Average Salary

SELECT TOP(1) (AVG(Salary)) AS 'MinAverageSalary' FROM Employees  GROUP BY DepartmentID 
  ORDER BY 'MinAverageSalary'
--=====================================================================================================

USE Geography
GO
-- PROBLEM  12. Highest Peaks in Bulgaria
SELECT MC.CountryCode, M.MountainRange, P.PeakName, P.Elevation  FROM Peaks AS P
      JOIN MountainsCountries AS MC ON MC.MountainId = P.MountainId
	  JOIN Mountains AS M ON M.Id = P.MountainId
	  WHERE MC.CountryCode = 'BG' AND P.Elevation > 2835
	  ORDER BY P.Elevation DESC
--=====================================================================================================

-- PROBLEM   13. Count Mountain Ranges
SELECT MC.CountryCode, COUNT(C.CountryCode) AS 'MountainRanges' FROM Countries AS C
   JOIN MountainsCountries AS MC ON C.CountryCode = MC.CountryCode
   WHERE MC.CountryCode = 'BG' OR MC.CountryCode = 'US' OR MC.CountryCode = 'RU'
   GROUP BY MC.CountryCode
--=====================================================================================================


-- PROBLEM    14. Countries With or Without Rivers

SELECT  TOP(5)C.CountryName, R.RiverName FROM Countries C
      LEFT JOIN CountriesRivers AS CR ON CR.CountryCode = C.CountryCode
	  LEFT JOIN Rivers AS R ON R.Id = CR.RiverId
	  LEFT JOIN Continents AS CO ON CO.ContinentCode = C.ContinentCode
	  WHERE CO.ContinentCode = 'AF'
	  ORDER BY C.CountryName
--=====================================================================================================

-- PROBLEM    15. *Continents and Currencies
SELECT ranked.ContinentCode,
       ranked.CurrencyCode,
       ranked.CurrencyUsage
FROM
(
    SELECT gbc.ContinentCode,
           gbc.CurrencyCode,
           gbc.CurrencyUsage,
           DENSE_RANK() OVER(PARTITION BY gbc.ContinentCode ORDER BY gbc.CurrencyUsage DESC) AS UsageRank
    FROM
    (
        SELECT ContinentCode,
               CurrencyCode,
               COUNT(CurrencyCode) AS CurrencyUsage
        FROM Countries
        GROUP BY ContinentCode,
                 CurrencyCode
        HAVING COUNT(CurrencyCode) > 1
    ) AS gbc
) AS ranked
WHERE ranked.UsageRank = 1
ORDER BY ranked.ContinentCode; 
--=====================================================================================================

-- PROBLEM   16. Countries Without any Mountains

SELECT COUNT(c.CountryCode) AS CountryCode
FROM Countries AS c
     LEFT OUTER JOIN MountainsCountries AS mc ON c.CountryCode = mc.CountryCode
WHERE mc.CountryCode IS NULL; 
--=====================================================================================================

-- PROBLEM   17. Highest Peak and Longest River by Country
SELECT TOP (5) peaks.CountryName,
               peaks.Elevation AS HighestPeakElevation,
               rivers.Length AS LongestRiverLength
FROM
(
    SELECT c.CountryName,
           c.CountryCode,
           DENSE_RANK() OVER(PARTITION BY c.CountryName ORDER BY p.Elevation DESC) AS DescendingElevationRank,
           p.Elevation
    FROM Countries AS c
         FULL OUTER JOIN MountainsCountries AS mc ON c.CountryCode = mc.CountryCode
         FULL OUTER JOIN Mountains AS m ON mc.MountainId = m.Id
         FULL OUTER JOIN Peaks AS p ON m.Id = p.MountainId
) AS peaks
FULL OUTER JOIN
(
    SELECT c.CountryName,
           c.CountryCode,
           DENSE_RANK() OVER(PARTITION BY c.CountryCode ORDER BY r.Length DESC) AS DescendingRiversLenghRank,
           r.Length
    FROM Countries AS c
         FULL OUTER JOIN CountriesRivers AS cr ON c.CountryCode = cr.CountryCode
         FULL OUTER JOIN Rivers AS r ON cr.RiverId = r.Id
) AS rivers ON peaks.CountryCode = rivers.CountryCode
WHERE peaks.DescendingElevationRank = 1
      AND rivers.DescendingRiversLenghRank = 1
      AND (peaks.Elevation IS NOT NULL
           OR rivers.Length IS NOT NULL)
ORDER BY HighestPeakElevation DESC,
         LongestRiverLength DESC,
         CountryName; 
		  
--=====================================================================================================

-- PROBLEM   18. *Highest Peak Name and Elevation by Country
WITH chp AS
(SELECT
   c.CountryName,
   p.PeakName,
   p.Elevation,
   m.MountainRange,
   ROW_NUMBER()
   OVER ( PARTITION BY c.CountryName
     ORDER BY p.Elevation DESC ) AS rn
 FROM Countries AS c
   LEFT JOIN CountriesRivers AS cr
     ON c.CountryCode = cr.CountryCode
   LEFT JOIN MountainsCountries AS mc
     ON mc.CountryCode = c.CountryCode
   LEFT JOIN Mountains AS m
     ON mc.MountainId = m.Id
   LEFT JOIN Peaks p
     ON p.MountainId = m.Id)

SELECT TOP 5
  chp.CountryName                           AS [Country],
  ISNULL(chp.PeakName, '(no highest peak)') AS [Highest Peak Name],
  ISNULL(chp.Elevation, 0)                  AS [Highest Peak Elevation],
  CASE WHEN chp.PeakName IS NOT NULL
    THEN chp.MountainRange
  ELSE '(no mountain)' END                  AS [Mountain]
FROM chp
WHERE rn = 1
ORDER BY chp.CountryName ASC, chp.PeakName ASC
--=====================================================================================================