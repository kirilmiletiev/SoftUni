CREATE DATABASE TripService
GO

USE TripService
GO

CREATE TABLE Cities(
Id INT PRIMARY KEY IDENTITY,
[Name] NVARCHAR(20) NOT NULL,
CountryCode CHAR(2) NOT NULL
)


CREATE TABLE Hotels(
Id INT PRIMARY KEY IDENTITY,
[Name] NVARCHAR(30) NOT NULL,
CityId INT NOT NULL FOREIGN KEY REFERENCES Cities(Id), ---- TODO
EmployeeCount INT NOT NULL,
BaseRate DECIMAL(14,2)
)

CREATE TABLE Rooms(
Id INT PRIMARY KEY IDENTITY,
Price DECIMAL(14,2) NOT NULL,
[Type] NVARCHAR(20) NOT NULL,
Beds INT NOT NULL,
HotelId INT NOT NULL FOREIGN KEY REFERENCES Hotels(Id)
)

CREATE TABLE Trips(
Id INT PRIMARY KEY IDENTITY,
RoomId INT NOT NULL FOREIGN KEY REFERENCES Rooms(Id),
BookDate DATE NOT NULL, -- CHECK(BookDate < ArrivalDate),			--TODO ?????
ArrivalDate DATE NOT NULL, -- CHECK (ArrivalDate < ReturnDate),			--TODO?????
ReturnDate DATE NOT NULL,
CancelDate DATE,

CONSTRAINT CH_Book CHECK(BookDate <  ArrivalDate),
CONSTRAINT CH_Arival CHECK(ArrivalDate  < ReturnDate)

)


CREATE TABLE Accounts(
Id INT PRIMARY KEY IDENTITY,
FirstName NVARCHAR(50) NOT NULL,
MiddleName NVARCHAR(20),
LastName NVARCHAR(50) NOT NULL,
CityId INT FOREIGN KEY REFERENCES  Cities(Id), -- TODO
BirthDate DATE NOT NULL,
Email VARCHAR(100) UNIQUE NOT NULL
)



CREATE TABLE AccountsTrips (
AccountId INT NOT NULL FOREIGN KEY REFERENCES Accounts(Id),
TripId INT NOT NULL FOREIGN KEY REFERENCES Trips(Id),
Luggage INT NOT NULL CHECK(Luggage >= 0),

CONSTRAINT  PK_AccountsTrips PRIMARY KEY(AccountId,TripId )
)



--====================================================================================

--02. Insert 
INSERT INTO Accounts (FirstName, MiddleName, LastName, CityId,  BirthDate, Email)
VALUES
 ('John', 'Smith', 'Smith',  34,'1975-07-21', 'j_smith@gmail.com'),
  ('Gosho', NULL, 'Petrov', 11,'1978-05-16', 'g_petrov@gmail.com'),
  ('Ivan', 'Petrovich', 'Pavlov', 59, '1849-09-26', 'i_pavlov@softuni.bg'),
   ('Friedrich', 'Wilhelm', 'Nietzsche', 2,  '1844-10-15', 'f_nietzsche@softuni.bg')


INSERT INTO Trips (RoomId, BookDate, ArrivalDate, ReturnDate, CancelDate)
VALUES	
	(101, '2015-04-12', '2015-04-14', '2015-04-20', '2015-02-02'),
	(102, '2015-07-07', '2015-07-15', '2015-07-22', '2015-04-29'),
	(103, '2013-07-17', '2013-07-23', '2013-07-24', NULL),
	( 104,'2012-03-17', '2012-03-31', '2012-04-01', '2012-01-10'),
	( 109,'2017-08-07', '2017-08-28', '2017-08-29', NULL)

	--====================================================================================

--03. Update 

UPDATE ROOMS 
	SET Price += (Price/100)*14
	WHERE HotelId = 5 OR HotelId = 9 OR HotelId = 7


	--====================================================================================

--04. Delete  
DELETE FROM AccountsTrips	
WHERE AccountId = 47

	--====================================================================================

--05. Bulgarian Cities 

SELECT id, name FROM Cities AS c
	WHERE c.CountryCode = 'BG'
	ORDER BY name

		--====================================================================================

--06. People Born After 1991 

SELECT (a.FirstName + ' '+  ISNULL(a.MiddleName + ' ', '') + a.LastName) AS 'FullName' ,
 YEAR(a.BirthDate) AS 'BirthYear'
FROM Accounts AS a
	WHERE YEAR(a.BirthDate) > 1991
	ORDER BY YEAR(a.BirthDate) DESC, a.FirstName ASC

	SELECT (a.FirstName + ' '+  ISNULL(a.MiddleName + ' ', '') + a.LastName) AS 'FullName' ,
 YEAR(a.BirthDate) AS 'BirthYear'
FROM Accounts AS a
	WHERE a.BirthDate > '1992'
	GROUP BY a.FirstName, a.MiddleName, a.LastName, YEAR(a.BirthDate)
	--HAVING YEAR(a.BirthDate) > 1992
	ORDER BY a.FirstName ASC, a.BirthDate DESC


	
		--====================================================================================

--07. EEE-Mails 

SELECT a.FirstName, a.LastName, FORMAT(a.BirthDate, ('MM-dd-yyyy')) AS'BirthDate',
		c.Name, a.Email FROM Accounts AS a
	JOIN Cities AS c ON c.Id = a.CityId
	WHERE a.Email LIKE 'e%'
	ORDER BY c.Name DESC


			--====================================================================================

--08. City Statistics 
	SELECT c.Name, COUNT(h.Id) AS 'Hotels' FROM Hotels AS h
		RiGHT JOIN Cities AS c ON c.Id = h.CityId
		GROUP BY c.Name
		ORDER BY COUNT(h.Id) DESC, c.Name

			SELECT * FROM Hotels AS h
		JOIN Cities AS c ON c.Id = h.CityId
				--====================================================================================

--09. Expensive First Class Rooms 

SELECT r.Id, r.Price, h.Name, c.Name FROM Rooms AS r
	JOIN Hotels AS h ON h.Id = r.HotelId
	JOIN Cities AS c ON c.Id = h.CityId
	WHERE r.Type = 'First Class'
	ORDER BY r.Price DESC, r.Id ASC


					--====================================================================================

--10. Longest and Shortest Trips 


	SELECt a.Id, (a.FirstName + ' ' + a.LastName) AS FullName,
		MAX( DATEDIFF(day, t.ArrivalDate, t.ReturnDate))  AS 'LongestTrip',
		MIN( DATEDIFF(day, t.ArrivalDate, t.ReturnDate)) AS 'ShortestTrip'
		 FROM Trips AS t
		JOIN AccountsTrips AS at ON at.TripId = t.Id
		JOIN Accounts AS a ON a.Id = at.AccountId
		GROUP BY a.Id, (a.FirstName + ' ' + a.LastName), A.MiddleName, t.CancelDate
		HAVING a.MiddleName IS NULL AND t.CancelDate IS NULL 
		ORDER BY 'LongestTrip' DESC, a.Id asc
	

						--====================================================================================

--11. Metropolis 

SELECT TOP(5) c.Id, c.Name, c.CountryCode, COUNT(a.Id) AS 'Accounts' 
	FROM  Accounts AS a
	JOIN Cities AS c ON c.Id = a.CityId 
	GROUP BY c.Id, c.Name, c.CountryCode
	ORDER BY Accounts DESC



						--====================================================================================

--12. Romantic Getaways 

SELECT a.Id, a.Email, c.Name, COUNT()
  FROM Accounts AS a
	JOIN Cities AS c ON c.Id = a.CityId
	JOIN AccountsTrips AS at ON at.AccountId = a.Id
	JOIN Trips AS t ON t.Id = at.TripId

	
						--====================================================================================

--13. Lucrative Destinations 

SELECT h.Id, c.Name, SUM(h.BaseRate)+ SUM(r.Price) AS 'Total Revenue', COUNT(t.Id) AS 'Trips'
FROM Hotels as h
	JOIN Cities AS c ON c.Id = h.CityId
	JOIN Rooms AS r on r.HotelId = h.Id
	 JOIN Trips AS t on t.RoomId = r.Id
	 WHERE YEAR(t.BookDate) = 2016
	GROUP BY h.Id, c.Name, (h.BaseRate + r.Price)
	ORDER BY h.BaseRate + r.Price DESC, COUNT(t.Id) DESC



					--====================================================================================

--14.Trip Revenues 


					--====================================================================================

--15. Top Travelers 

SELECT at.AccountId, a.Email, c.CountryCode, COUNT(at.TripId)
 FROM AccountsTrips AS at
	JOIN Accounts AS a ON a.Id = at.AccountId
	JOIN Cities AS c ON c.Id = a.CityId
	--WHERE c.Id = a.CityId
	GROUP BY at.AccountId, a.Email, c.CountryCode, c.Id, a.CityId
	HAVING c.Id = a.CityId
	ORDER BY COUNT(at.TripId) DESC


						--====================================================================================

--20 BONUS
GO

CREATE TRIGGER tr_TownsUpdate ON Trips INSTEAD OF DELETE
AS 
IF	EXISTS(SELECT CancelDate FROM Trips
			WHERE CancelDate IS  NULL)
			BEGIN
			
				UPDATE Trips
					SET CancelDate = CancelDate
			END
	ELSE IF(EXISTS(SELECT CancelDate FROM Trips
			WHERE CancelDate IS NOT  NULL))
			BEGIN
			
				UPDATE Trips
					SET CancelDate = GETDATE()
					
			END