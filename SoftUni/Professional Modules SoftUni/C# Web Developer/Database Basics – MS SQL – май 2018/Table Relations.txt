CREATE DATABASE TableRelations
GO;

USE TableRelations;


--- PROBLEM      01. One-To-One Relationship

CREATE TABLE  Passports(
PassportID INT UNIQUE IDENTITY (101, 1) NOT NULL,
PassportNumber NVARCHAR(50) NOT NULL,

CONSTRAINT PK_Passports PRIMARY KEY(PassportID)
)


CREATE TABLE Persons (
PersonID INT IDENTITY NOT NULL,
FirstName NVARCHAR(50) NOT NULL,
Salary DECIMAL(15,2) NOT NULL,
PassportID INT UNIQUE NOT NULL,

CONSTRAINT PK_Persons PRIMARY KEY(PersonID),
CONSTRAINT FK_Persons_Passports FOREIGN KEY (PassportID) REFERENCES Passports(PassportID)
)

--***************************************************************************************************
--***************************************************************************************************



--- PROBLEM    02. One-To-Many Relationship

CREATE TABLE	Manufacturers(
ManufacturerID INT UNIQUE IDENTITY NOT NULL,
[Name] NVARCHAR(50) NOT NULL,
EstablishedOn DATE NOT NULL,

 CONSTRAINT PK_Manufactures PRIMARY KEY(ManufacturerID)
)

CREATE TABLE Models (
ModelID INT UNIQUE IDENTITY(101, 1) NOT NULL,
[Name] NVARCHAR(50) UNIQUE NOT NULL,
ManufacturerID INT NOT NULL,

CONSTRAINT PK_Models PRIMARY KEY(ModelId),
CONSTRAINT FK_Models_Manufacturs FOREIGN KEY (ManufacturerID) REFERENCES Manufacturers(ManufacturerID)
)

--***************************************************************************************************
--***************************************************************************************************



--- PROBLEM    03. Many-To-Many Relationship

CREATE TABLE Exams(
ExamID INT UNIQUE IDENTITY (101, 1) NOT NULL,
[Name] NVARCHAR(50) NOT NULL,

CONSTRAINT PK_Exams PRIMARY KEY (ExamID)
)

CREATE TABLE Students(
StudentID INT UNIQUE IDENTITY NOT NULL,
[Name] NVARCHAR(50) NOT NULL,

CONSTRAINT PK_Students PRIMARY KEY (StudentID)
)

CREATE TABLE StudentsExams(
StudentID INT  NOT NULL,
ExamID INT  NOT NULL,

CONSTRAINT PK_StudetnsExams PRIMARY KEY (ExamID, StudentID),
CONSTRAINT FK_StudentsExams_Students FOREIGN KEY(StudentID) REFERENCES Students(StudentID),
CONSTRAINT FK_StudentsExams_Exams FOREIGN KEY (ExamID) REFERENCES Exams(ExamID)
)



--***************************************************************************************************
--***************************************************************************************************



--- PROBLEM   04. Self-Referencing

CREATE TABLE Teachers(
TeacherID INT NOT NULL,
[Name] NVARCHAR(50) NOT NULL,
ManagerID INT NOT NULL,

CONSTRAINT PK_Teachers PRIMARY KEY(TeacherID),
CONSTRAINT FK_ManagerID_TeacherID FOREIGN KEY(ManagerID) REFERENCES Teachers(TeacherID)
)

--***************************************************************************************************
--***************************************************************************************************



--- PROBLEM   05. Online Store Database

CREATE TABLE ItemTypes(
ItemTypeID INT NOT NULL,
[Name] NVARCHAR(50) NOT NULL,

CONSTRAINT PK_ItemTypes PRIMARY KEY(ItemTypeID)
)


CREATE TABLE Items(
ItemID INT NOT NULL,
[Name] NVARCHAR(50) NOT NULL,
ItemTypeID INT NOT NULL,

CONSTRAINT PK_Items PRIMARY KEY(ItemID),
CONSTRAINT FK_Item_ItemTypes FOREIGN KEY(ItemTypeID) REFERENCES ItemTypes(ItemTypeID)
)



CREATE TABLE Cities(
CityID INT NOT NULL,
[Name] NVARCHAR(50) NOT NULL,

CONSTRAINT PK_Cities PRIMARY KEY(CityID)
)


CREATE TABLE Customers(
CustomerID INT NOT NULL,
[Name] NVARCHAR(50),
Birthday DATE NOT NULL,
CityID INT NOT NULL,

CONSTRAINT PK_Customers PRIMARY KEY(CustomerID),
CONSTRAINT FK_Customers_Cities FOREIGN KEY(CityID) REFERENCES Cities(CityID)
)

CREATE TABLE Orders(
OrderID INT NOT NULL,
CustomerID INT NOT NULL,

CONSTRAINT PK_Orders PRIMARY KEY (OrderId),
CONSTRAINT FK_Orders_Customers FOREIGN KEY(CustomerID) REFERENCES Customers(CustomerID)
)

CREATE TABLE OrderItems(
OrderID INT  NOT NULL,
ItemID INT NOT NULL,

CONSTRAINT PK_OrderItems PRIMARY KEY(OrderID, ItemID),
CONSTRAINT FK_OrderItems_Orders FOREIGN KEY(OrderID) REFERENCES Orders(OrderID),
CONSTRAINT FK_OrderItems_Items FOREIGN KEY(ItemID) REFERENCES Items(ItemID)

)

--***************************************************************************************************
--***************************************************************************************************



--- PROBLEM   06. University Database

 DROP TABLE Students --<-<-<-< THIS IS NOT NEEDED FOR JUDGE! THIS IS FOR LOCAL SHIT DB THAT I MADE .. LOL..


CREATE TABLE Majors(
MajorID INT NOT NULL,
[Name] NVARCHAR(50),

CONSTRAINT PK_Majors PRIMARY KEY(MajorID)
)


CREATE TABLE Students(
StudentID INT NOT NULL,
StudentNumber INT NOT NULL,
StudentName NVARCHAR(50) NOT NULL,
MajorID INT NOT NULL

CONSTRAINT PK_Students PRIMARY KEY(StudentID),
CONSTRAINT FK_Students_Majors FOREIGN KEY(MajorID) REFERENCES Majors(MajorID)
)

CREATE TABLE Payments(
PaymentID INT NOT NULL,
PaymentDate DATE NOT NULL,
PaymentAmount DECIMAL(15,2) NOT NULL,
StudentID INT NOT NULL,

CONSTRAINT PK_Payments PRIMARY KEY(PaymentID),
CONSTRAINT FK_Payments_Students FOREIGN KEY (StudentID) REFERENCES Students(StudentID)
)




CREATE TABLE Subjects(
SubjectID INT NOT NULL,
SubjectName NVARCHAR(50) NOT NULL,

CONSTRAINT PK_Subjects PRIMARY KEY(SubjectID)
)

CREATE TABLE Agenda(
StudentID INT NOT NULL,
SubjectID INT NOT NULL,

CONSTRAINT PK_Agenda PRIMARY KEY(StudentID, SubjectID),
CONSTRAINT FK_Agenda_Students FOREIGN KEY(StudentID) REFERENCES Students(StudentID),
CONSTRAINT FK_Agenda_Subjects FOREIGN KEY(SubjectID) REFERENCES Subjects(SubjectID)
)
--***************************************************************************************************
--***************************************************************************************************



--- PROBLEM   09. *Peaks in Rila

USE Geography;

SELECT 'Rila' AS 'MountainRange', PeakName, Elevation FROM Peaks WHERE MountainId = 17 ORDER BY Elevation DESC
--SELECT * FROM Mountains WHERE MountainRange = 'Rila'


--***************************************************************************************************
--***************************************************************************************************

